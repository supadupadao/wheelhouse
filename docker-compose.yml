services:
  db:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
      POSTGRES_DB: ${SKIPPER_DB:-skipper}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${SKIPPER_DB:-skipper}" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - postgres:/data/postgres
    networks:
      - skipper
    restart: unless-stopped
  
  indexer:
    build:
      context: .
      dockerfile: indexer/Dockerfile
    environment:
      INDEXER_DB_URL: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${SKIPPER_DB:-skipper}"
      INDEXER_SKIPPER_ADDRESS: ${INDEXER_SKIPPER_ADDRESS}
      INDEXER_TONAPI_TOKEN: ${INDEXER_TONAPI_TOKEN}
    networks:
      - skipper
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    environment:
      API_DB_URL: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${SKIPPER_DB:-skipper}"
      API_TONAPI_TOKEN: ${API_TONAPI_TOKEN}
    networks:
      - skipper
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - frontend_build:/app/dist

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    environment:
      - NGINX_PORT=80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
    networks:
      - skipper
    depends_on:
      frontend:
        condition: service_completed_successfully
      api:
        condition: service_started

networks:
  skipper:
    name: skipper-network
    driver: bridge

volumes:
  postgres:
  frontend_build:
